/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
private:
    bool isSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(pRoot2==NULL) return true;//子树遍历完了
        if(pRoot1==NULL) return false;
        bool retult = true;
        if(pRoot1->val!=pRoot2->val) retult = false;
        
        if(retult) retult = isSubtree(pRoot1->left, pRoot2->left);
        if(retult) retult = isSubtree(pRoot1->right, pRoot2->right);
        return retult;
    }
public:
    /**
    *在树种找到子树根节点，然后比较两个子树是否相同
    */
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(pRoot1==NULL||pRoot2==NULL)
            return false;
        bool result = false;
        if(pRoot1->val==pRoot2->val)
            result =  isSubtree(pRoot1,pRoot2);//判断两个子树是否一样
        if(!result) result = HasSubtree(pRoot1->left, pRoot2);
        if(!result) result = HasSubtree(pRoot1->right, pRoot2);
        return result;
    }
};