class Solution {
private:
    int count;
    void merge(vector<int> data,int begin,int mid,int end)
    {
        vector<int> tmp(end-begin+1,0);
        int i = begin,j = mid+1,k = 0;
        while(i<=mid&j<=end)
        {
            if(data[i]<=data[j])
                tmp[k++] = data[i++];
            else{
                tmp[k++] = data[j++];
                count=(count+mid-i)%1000000007;;
            }
        }
        while(i<=mid) tmp[k++] = data[i++];
        while(j<=end) tmp[k++] = data[j++];
        
        for(int i = 0;i<k;i++)
        {
            
            data[begin+i] = tmp[i];
        }
        return;
    }
    void mergeSort(vector<int> data,int begin,int end)
    {
        if(begin>=end)
            return;
        int mid = (begin+end)/2;
        mergeSort(data,begin,mid);
        mergeSort(data,mid+1,end);
        
        merge(data,begin,mid,end);
        return;
    }
public:
    int InversePairs(vector<int> data) {
        if(data.empty())
            return 0;
        count = 0;
        mergeSort(data,0,data.size()-1);
        return count;
    }
};